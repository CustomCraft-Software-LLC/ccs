import*as e from"fs";import t from"fs";import o from"axios";import i from"chalk";import s from"path";import l from"moment-timezone";import{blue as r,green as a,yellow as n,red as m}from"colorette";const c=(e,t)=>{const o=(new Date).toLocaleString(),i=e.toUpperCase().padEnd(7);return t.split("\n").map((e=>`[${o}] ${i} - ${e}`)).join("\n")},p=(e,t)=>{const o=c(e,t);console.log(((e,t)=>{switch(e.toLowerCase()){case"info":return i.blue(t);case"warn":return i.yellow(t);case"error":return i.red(t);default:return t}})(e,o))};class h{static open(e){e.file&&(this.fileName=e.file),e.json&&(this.jsonFileName=e.json),e.api&&(this.apiUrl=e.api)}static async log(t,i){this.fileName&&((t,o,i)=>{try{const s=c(o,i);e.appendFileSync(t,s+"\n")}catch(e){console.error(`Failed to write to file "${t}":`,e)}})(this.fileName,t,i),this.jsonFileName&&((t,o,i)=>{const s={timestamp:(new Date).toISOString(),level:o.toUpperCase(),message:i};try{e.appendFileSync(t,JSON.stringify(s,null,2)+"\n")}catch(e){console.error(`Failed to write JSON log to file "${t}":`,e)}})(this.jsonFileName,t,i),this.apiUrl&&await(async(e,t,i)=>{try{await o.post(e,{timestamp:(new Date).toISOString(),level:t.toUpperCase(),message:i})}catch(e){console.error("Failed to send log to API:",e)}})(this.apiUrl,t,i),p(t,i)}}class g{constructor(e=g.LEVELS.INFO,t="UTC",o=s.join(__dirname,"../logs")){this.level=e,this.timezone=t;const i=l().tz(this.timezone).format("YYYY-MM-DD");this.logFilePath=s.join(o,`${i}_${this.timezone}.log`),this.jsonFilePath=s.join(o,`${i}_${this.timezone}.json`)}getTimestamp(){return l().tz(this.timezone).format("YYYY-MM-DD HH:mm:ss zzz")}getLevelName(e){return["DEBUG","INFO","WARN","ERROR"][e]||"UNKNOWN"}formatMessage(e,t,o=!1){const i=[r,a,n,m],s=this.getLevelName(e),l=o?i[e]:e=>e;return`${this.getTimestamp()} ${l(`[${s}]`)} - ${t}`}log(e,t){if(e>=this.level){const o=this.formatMessage(e,t);this.appendToFile(this.logFilePath,o),this.appendToJsonFile(e,t)}}appendToFile(e,o){t.appendFile(e,o+"\n",(e=>{e&&console.error("Failed to write to log file:",e)}))}appendToJsonFile(e,o){const i={timestamp:this.getTimestamp(),level:this.getLevelName(e),message:o};t.readFile(this.jsonFilePath,((e,o)=>{let s=[];if(!e&&o.length>0)try{s=JSON.parse(o.toString())}catch(e){console.error("Failed to parse JSON file:",e)}s.push(i),t.writeFile(this.jsonFilePath,JSON.stringify(s,null,2),(e=>{e&&console.error("Failed to write to JSON file:",e)}))}))}async sendAPI(e,i,s){try{const l=t.readFileSync(this.jsonFilePath,"utf8"),r=JSON.parse(l).filter((e=>{const t=new Date(e.timestamp);return t>=i&&t<=s})),a=await o.post(e,r,{headers:{"Content-Type":"application/json"}});console.log("Successfully sent logs:",a.data)}catch(e){console.error("Failed to send logs:",e)}}debug(e){this.log(g.LEVELS.DEBUG,e)}info(e){this.log(g.LEVELS.INFO,e)}warn(e){this.log(g.LEVELS.WARN,e)}error(e){this.log(g.LEVELS.ERROR,e)}setLevel(e){if(!Object.values(g.LEVELS).includes(e))throw new Error("Invalid log level");this.level=e}}g.LEVELS={DEBUG:0,INFO:1,WARN:2,ERROR:3};export{h as Log,g as Logger};
//# sourceMappingURL=index.esm.js.map

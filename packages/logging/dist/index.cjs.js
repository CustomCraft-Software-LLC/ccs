"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("fs"),t=require("axios"),o=require("chalk"),i=require("path"),s=require("moment-timezone"),l=require("colorette");function r(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}function a(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(o){if("default"!==o){var i=Object.getOwnPropertyDescriptor(e,o);Object.defineProperty(t,o,i.get?i:{enumerable:!0,get:function(){return e[o]}})}})),t.default=e,Object.freeze(t)}var n=a(e),c=r(e),u=r(t),f=r(o),p=r(i),h=r(s);const d=(e,t)=>{const o=(new Date).toLocaleString(),i=e.toUpperCase().padEnd(7);return t.split("\n").map((e=>`[${o}] ${i} - ${e}`)).join("\n")},g=(e,t)=>{const o=d(e,t);console.log(((e,t)=>{switch(e.toLowerCase()){case"info":return f.default.blue(t);case"warn":return f.default.yellow(t);case"error":return f.default.red(t);default:return t}})(e,o))};class m{constructor(e=m.LEVELS.INFO,t="UTC",o=p.default.join(__dirname,"../logs")){this.level=e,this.timezone=t;const i=h.default().tz(this.timezone).format("YYYY-MM-DD");this.logFilePath=p.default.join(o,`${i}_${this.timezone}.log`),this.jsonFilePath=p.default.join(o,`${i}_${this.timezone}.json`)}getTimestamp(){return h.default().tz(this.timezone).format("YYYY-MM-DD HH:mm:ss zzz")}getLevelName(e){return["DEBUG","INFO","WARN","ERROR"][e]||"UNKNOWN"}formatMessage(e,t,o=!1){const i=[l.blue,l.green,l.yellow,l.red],s=this.getLevelName(e),r=o?i[e]:e=>e;return`${this.getTimestamp()} ${r(`[${s}]`)} - ${t}`}log(e,t){if(e>=this.level){const o=this.formatMessage(e,t);this.appendToFile(this.logFilePath,o),this.appendToJsonFile(e,t)}}appendToFile(e,t){c.default.appendFile(e,t+"\n",(e=>{e&&console.error("Failed to write to log file:",e)}))}appendToJsonFile(e,t){const o={timestamp:this.getTimestamp(),level:this.getLevelName(e),message:t};c.default.readFile(this.jsonFilePath,((e,t)=>{let i=[];if(!e&&t.length>0)try{i=JSON.parse(t.toString())}catch(e){console.error("Failed to parse JSON file:",e)}i.push(o),c.default.writeFile(this.jsonFilePath,JSON.stringify(i,null,2),(e=>{e&&console.error("Failed to write to JSON file:",e)}))}))}async sendAPI(e,t,o){try{const i=c.default.readFileSync(this.jsonFilePath,"utf8"),s=JSON.parse(i).filter((e=>{const i=new Date(e.timestamp);return i>=t&&i<=o})),l=await u.default.post(e,s,{headers:{"Content-Type":"application/json"}});console.log("Successfully sent logs:",l.data)}catch(e){console.error("Failed to send logs:",e)}}debug(e){this.log(m.LEVELS.DEBUG,e)}info(e){this.log(m.LEVELS.INFO,e)}warn(e){this.log(m.LEVELS.WARN,e)}error(e){this.log(m.LEVELS.ERROR,e)}setLevel(e){if(!Object.values(m.LEVELS).includes(e))throw new Error("Invalid log level");this.level=e}}m.LEVELS={DEBUG:0,INFO:1,WARN:2,ERROR:3},exports.Log=class{static open(e){e.file&&(this.fileName=e.file),e.json&&(this.jsonFileName=e.json),e.api&&(this.apiUrl=e.api)}static async log(e,t){this.fileName&&((e,t,o)=>{try{const i=d(t,o);n.appendFileSync(e,i+"\n")}catch(t){console.error(`Failed to write to file "${e}":`,t)}})(this.fileName,e,t),this.jsonFileName&&((e,t,o)=>{const i={timestamp:(new Date).toISOString(),level:t.toUpperCase(),message:o};try{n.appendFileSync(e,JSON.stringify(i,null,2)+"\n")}catch(t){console.error(`Failed to write JSON log to file "${e}":`,t)}})(this.jsonFileName,e,t),this.apiUrl&&await(async(e,t,o)=>{try{await u.default.post(e,{timestamp:(new Date).toISOString(),level:t.toUpperCase(),message:o})}catch(e){console.error("Failed to send log to API:",e)}})(this.apiUrl,e,t),g(e,t)}},exports.Logger=m;
//# sourceMappingURL=index.cjs.js.map
